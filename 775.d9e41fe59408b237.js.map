{"version":3,"file":"775.d9e41fe59408b237.js","mappings":"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","names":["FuseAlertService","constructor","this","ReplaySubject","onDismiss","_onDismiss","asObservable","onShow","_onShow","dismiss","name","next","show","factory","i0","FuseAlertComponent","_changeDetectorRef","_fuseAlertService","_fuseUtilsService","randomId","EventEmitter","Subject","classList","appearance","dismissed","dismissible","showIcon","type","ngOnChanges","changes","coerceBooleanProperty","currentValue","_toggleDismiss","ngOnInit","pipe","filter","takeUntil","_unsubscribeAll","subscribe","ngOnDestroy","complete","dismissedChanged","markForCheck","selectors","fuseAnimations","changeDetection","FuseAlertModule","CommonModule","MatButtonModule","MatIconModule"],"sourceRoot":"webpack:///","sources":["./src/@fuse/components/alert/alert.service.ts","./src/@fuse/components/alert/alert.component.html","./src/@fuse/components/alert/alert.component.ts","./src/@fuse/components/alert/alert.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FuseAlertService\r\n{\r\n    private readonly _onDismiss: ReplaySubject<string> = new ReplaySubject<string>(1);\r\n    private readonly _onShow: ReplaySubject<string> = new ReplaySubject<string>(1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Getter for onDismiss\r\n     */\r\n    get onDismiss(): Observable<any>\r\n    {\r\n        return this._onDismiss.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Getter for onShow\r\n     */\r\n    get onShow(): Observable<any>\r\n    {\r\n        return this._onShow.asObservable();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Dismiss the alert\r\n     *\r\n     * @param name\r\n     */\r\n    dismiss(name: string): void\r\n    {\r\n        // Return if the name is not provided\r\n        if ( !name )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Execute the observable\r\n        this._onDismiss.next(name);\r\n    }\r\n\r\n    /**\r\n     * Show the dismissed alert\r\n     *\r\n     * @param name\r\n     */\r\n    show(name: string): void\r\n    {\r\n        // Return if the name is not provided\r\n        if ( !name )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Execute the observable\r\n        this._onShow.next(name);\r\n    }\r\n\r\n}\r\n","<div\r\n    class=\"fuse-alert-container\"\r\n    *ngIf=\"!dismissible || dismissible && !dismissed\"\r\n    [@fadeIn]=\"!dismissed\"\r\n    [@fadeOut]=\"!dismissed\">\r\n\r\n    <!-- Border -->\r\n    <div\r\n        class=\"fuse-alert-border\"\r\n        *ngIf=\"appearance === 'border'\"></div>\r\n\r\n    <!-- Icon -->\r\n    <div\r\n        class=\"fuse-alert-icon\"\r\n        *ngIf=\"showIcon\">\r\n\r\n        <!-- Custom icon -->\r\n        <div class=\"fuse-alert-custom-icon\">\r\n            <ng-content select=\"[fuseAlertIcon]\"></ng-content>\r\n        </div>\r\n\r\n        <!-- Default icons -->\r\n        <div class=\"fuse-alert-default-icon\">\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'primary'\"\r\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'accent'\"\r\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'warn'\"\r\n                [svgIcon]=\"'heroicons_solid:x-circle'\"></mat-icon>\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'basic'\"\r\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'info'\"\r\n                [svgIcon]=\"'heroicons_solid:information-circle'\"></mat-icon>\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'success'\"\r\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'warning'\"\r\n                [svgIcon]=\"'heroicons_solid:exclamation'\"></mat-icon>\r\n\r\n            <mat-icon\r\n                *ngIf=\"type === 'error'\"\r\n                [svgIcon]=\"'heroicons_solid:x-circle'\"></mat-icon>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <!-- Content -->\r\n    <div class=\"fuse-alert-content\">\r\n\r\n        <div class=\"fuse-alert-title\">\r\n            <ng-content select=\"[fuseAlertTitle]\"></ng-content>\r\n        </div>\r\n\r\n        <div class=\"fuse-alert-message\">\r\n            <ng-content></ng-content>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <!-- Dismiss button -->\r\n    <button\r\n        class=\"fuse-alert-dismiss-button\"\r\n        mat-icon-button\r\n        (click)=\"dismiss()\">\r\n        <mat-icon [svgIcon]=\"'heroicons_solid:x'\"></mat-icon>\r\n    </button>\r\n\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostBinding, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { filter, Subject, takeUntil } from 'rxjs';\r\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { FuseAlertAppearance, FuseAlertType } from '@fuse/components/alert/alert.types';\r\nimport { FuseAlertService } from '@fuse/components/alert/alert.service';\r\nimport { FuseUtilsService } from '@fuse/services/utils/utils.service';\r\n\r\n@Component({\r\n    selector       : 'fuse-alert',\r\n    templateUrl    : './alert.component.html',\r\n    styleUrls      : ['./alert.component.scss'],\r\n    encapsulation  : ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    animations     : fuseAnimations,\r\n    exportAs       : 'fuseAlert'\r\n})\r\nexport class FuseAlertComponent implements OnChanges, OnInit, OnDestroy\r\n{\r\n    /* eslint-disable @typescript-eslint/naming-convention */\r\n    static ngAcceptInputType_dismissible: BooleanInput;\r\n    static ngAcceptInputType_dismissed: BooleanInput;\r\n    static ngAcceptInputType_showIcon: BooleanInput;\r\n    /* eslint-enable @typescript-eslint/naming-convention */\r\n\r\n    @Input() appearance: FuseAlertAppearance = 'soft';\r\n    @Input() dismissed: boolean = false;\r\n    @Input() dismissible: boolean = false;\r\n    @Input() name: string = this._fuseUtilsService.randomId();\r\n    @Input() showIcon: boolean = true;\r\n    @Input() type: FuseAlertType = 'primary';\r\n    @Output() readonly dismissedChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(\r\n        private _changeDetectorRef: ChangeDetectorRef,\r\n        private _fuseAlertService: FuseAlertService,\r\n        private _fuseUtilsService: FuseUtilsService\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Host binding for component classes\r\n     */\r\n    @HostBinding('class') get classList(): any\r\n    {\r\n        /* eslint-disable @typescript-eslint/naming-convention */\r\n        return {\r\n            'fuse-alert-appearance-border' : this.appearance === 'border',\r\n            'fuse-alert-appearance-fill'   : this.appearance === 'fill',\r\n            'fuse-alert-appearance-outline': this.appearance === 'outline',\r\n            'fuse-alert-appearance-soft'   : this.appearance === 'soft',\r\n            'fuse-alert-dismissed'         : this.dismissed,\r\n            'fuse-alert-dismissible'       : this.dismissible,\r\n            'fuse-alert-show-icon'         : this.showIcon,\r\n            'fuse-alert-type-primary'      : this.type === 'primary',\r\n            'fuse-alert-type-accent'       : this.type === 'accent',\r\n            'fuse-alert-type-warn'         : this.type === 'warn',\r\n            'fuse-alert-type-basic'        : this.type === 'basic',\r\n            'fuse-alert-type-info'         : this.type === 'info',\r\n            'fuse-alert-type-success'      : this.type === 'success',\r\n            'fuse-alert-type-warning'      : this.type === 'warning',\r\n            'fuse-alert-type-error'        : this.type === 'error'\r\n        };\r\n        /* eslint-enable @typescript-eslint/naming-convention */\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On changes\r\n     *\r\n     * @param changes\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void\r\n    {\r\n        // Dismissed\r\n        if ( 'dismissed' in changes )\r\n        {\r\n            // Coerce the value to a boolean\r\n            this.dismissed = coerceBooleanProperty(changes.dismissed.currentValue);\r\n\r\n            // Dismiss/show the alert\r\n            this._toggleDismiss(this.dismissed);\r\n        }\r\n\r\n        // Dismissible\r\n        if ( 'dismissible' in changes )\r\n        {\r\n            // Coerce the value to a boolean\r\n            this.dismissible = coerceBooleanProperty(changes.dismissible.currentValue);\r\n        }\r\n\r\n        // Show icon\r\n        if ( 'showIcon' in changes )\r\n        {\r\n            // Coerce the value to a boolean\r\n            this.showIcon = coerceBooleanProperty(changes.showIcon.currentValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        // Subscribe to the dismiss calls\r\n        this._fuseAlertService.onDismiss\r\n            .pipe(\r\n                filter(name => this.name === name),\r\n                takeUntil(this._unsubscribeAll)\r\n            )\r\n            .subscribe(() => {\r\n\r\n                // Dismiss the alert\r\n                this.dismiss();\r\n            });\r\n\r\n        // Subscribe to the show calls\r\n        this._fuseAlertService.onShow\r\n            .pipe(\r\n                filter(name => this.name === name),\r\n                takeUntil(this._unsubscribeAll)\r\n            )\r\n            .subscribe(() => {\r\n\r\n                // Show the alert\r\n                this.show();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next(null);\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Dismiss the alert\r\n     */\r\n    dismiss(): void\r\n    {\r\n        // Return if the alert is already dismissed\r\n        if ( this.dismissed )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Dismiss the alert\r\n        this._toggleDismiss(true);\r\n    }\r\n\r\n    /**\r\n     * Show the dismissed alert\r\n     */\r\n    show(): void\r\n    {\r\n        // Return if the alert is already showing\r\n        if ( !this.dismissed )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Show the alert\r\n        this._toggleDismiss(false);\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Dismiss/show the alert\r\n     *\r\n     * @param dismissed\r\n     * @private\r\n     */\r\n    private _toggleDismiss(dismissed: boolean): void\r\n    {\r\n        // Return if the alert is not dismissible\r\n        if ( !this.dismissible )\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Set the dismissed\r\n        this.dismissed = dismissed;\r\n\r\n        // Execute the observable\r\n        this.dismissedChanged.next(this.dismissed);\r\n\r\n        // Notify the change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FuseAlertComponent } from '@fuse/components/alert/alert.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        FuseAlertComponent\r\n    ],\r\n    imports     : [\r\n        CommonModule,\r\n        MatButtonModule,\r\n        MatIconModule\r\n    ],\r\n    exports     : [\r\n        FuseAlertComponent\r\n    ]\r\n})\r\nexport class FuseAlertModule\r\n{\r\n}\r\n"],"x_google_ignoreList":[]}