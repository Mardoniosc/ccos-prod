{"version":3,"file":"848.37a9f7b76f7cda21.js","mappings":"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","names":["OrdemServicoService","BaseResourceService","constructor","injector","super","this","i0","factory","OrdemservicoListComponent","BaseResourceListComponent","ordemServicoService","selectors","ctx","OrdemservicoFormComponent","ngOnInit","routes","path","component","OrdemServicoModule","CommonModule","RouterModule","SharedModule","NotFoundDataComponent","PageHeaderComponent","EventEmitter","filtrar","termo","pesquisar","emit","RulesService","temPermissao","rule","token","localStorage","getItem","ELocalStorage","ROLES","AuthUtils","Object","find","permissao","injecto","resourceService","_fuseConfirmationService","get","FuseConfirmationService","_matPaginatorIntl","MatPaginatorIntl","_ruleService","carregaInformacoesResource","itemsPerPageLabel","setPageSizeOptions","setPageSizeOptionsInput","pageSizeOptions","split","map","str","getAll","filtro","pagina","direcaoOrdenacao","tamanho","ordenarPor","subscribe","data","resources","content","length","totalElements","pageSize","size","excluir","resource","open","title","id","message","icon","show","name","color","actions","confirm","label","cancel","dismissible","afterClosed","result","delete","res","toastr","timeOut","progressBar","closeButton","error","paginacao","event","pageIndex","filtrarResource","validaPermissao"],"sourceRoot":"webpack:///","sources":["./src/app/modules/ccos/ordem-servico/api/ordem-servico.service.ts","./src/app/modules/ccos/ordem-servico/containers/ordemservico-list/ordemservico-list.component.html","./src/app/modules/ccos/ordem-servico/containers/ordemservico-list/ordemservico-list.component.ts","./src/app/modules/ccos/ordem-servico/containers/ordemservico-form/ordemservico-form.component.ts","./src/app/modules/ccos/ordem-servico/containers/ordemservico-form/ordemservico-form.component.html","./src/app/modules/ccos/ordem-servico/ordem-servico.module.ts","./src/app/shared/components/not-found-data/not-found-data.component.ts","./src/app/shared/components/not-found-data/not-found-data.component.html","./src/app/shared/components/page-header/page-header.component.html","./src/app/shared/components/page-header/page-header.component.ts","./src/app/shared/services/rules.service.ts","./src/app/shared/containers/base-resource-list/base-resource-list.component.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\nimport { OrdemServico, OrdemServicoResponse } from '../models/ordem-servico.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdemServicoService extends BaseResourceService<OrdemServico, OrdemServicoResponse> {\n  constructor(protected injector: Injector) {\n    super('/ordemServicos', injector);\n  }\n}\n","<div class=\"absolute inset-0 flex flex-col min-w-0 overflow-hidden bg-card dark:bg-transparent\">\n  <div class=\"flex flex-col flex-auto min-w-0 overflow-y-auto\" cdkScrollable>\n\n    <app-page-header [show-button]=\"true\" page-title=\"Ordem De Serviços\" placeholder-text=\"Buscar por nome\" (pesquisar)=\"filtrarResource($event)\">\n    </app-page-header>\n\n    <!-- Page body -->\n    <div class=\"flex flex-col flex-auto min-w-0 overflow-y-auto\" cdkScrollable *ngIf=\"length > 0\">\n      <mat-table [dataSource]=\"resources\">\n        <!-- User name Definition -->\n        <ng-container matColumnDef=\"codigoSupergas\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> Cod. Supergás </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.codigoSupergas }}\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"status\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> Status </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.status }}\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"cliente\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> Cliente </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.cliente.nome }}\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"tipoServico\" class=\"cursor-pointer\">\n          <mat-header-cell *matHeaderCellDef> Tipo de Serviço </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.tipoServico }}\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"data\">\n          <mat-header-cell *matHeaderCellDef> Data </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\"> {{ row.data | date: 'd/M/y' }} </mat-cell>\n        </ng-container>\n\n\n\n        <ng-container matColumnDef=\"acoes\">\n          <mat-header-cell *matHeaderCellDef> Ações </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            <span *ngIf=\"!validaPermissao('MANTER_PERFIL')\">-</span>\n            <span class=\"mr-2 cursor-pointer\" [routerLink]=\"[row.id, 'editar']\" *ngIf=\"validaPermissao('MANTER_PERFIL')\">\n              <mat-icon class=\"text-accent dark:text-accent-300\" svgIcon=\"heroicons_outline:pencil-alt\"></mat-icon>\n            </span>\n            <span (click)=\"excluir(row)\" class=\"cursor-pointer\" *ngIf=\"validaPermissao('MANTER_PERFIL')\">\n              <mat-icon class=\"text-warn-600\" svgIcon=\"heroicons_outline:trash\"></mat-icon>\n            </span>\n          </mat-cell>\n        </ng-container>\n\n        <!-- Header and Row Declarations -->\n        <mat-header-row *matHeaderRowDef=\"['codigoSupergas', 'cliente', 'tipoServico', 'data', 'status', 'acoes']\"></mat-header-row>\n        <mat-row *matRowDef=\"let row; columns: ['codigoSupergas', 'cliente', 'tipoServico', 'data', 'status', 'acoes']\"></mat-row>\n      </mat-table>\n    </div>\n\n    <!-- NENHUM DADO ENCONTRADO -->\n    <app-not-found-data class=\"h-full\" mensagem=\"Nenhum registro de perfils encontrado!\" *ngIf=\"length <= 0\">\n    </app-not-found-data>\n  </div>\n  <div class=\"flex flex-0 flex-col\" *ngIf=\"length > 0\">\n    <mat-paginator class=\"flex justify-end border-t\" [length]=\"length\" [pageSize]=\"pageSize\"\n      [pageSizeOptions]=\"pageSizeOptions\" (page)=\"paginacao($event)\" aria-label=\"Select page\">\n    </mat-paginator>\n  </div>\n</div>\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { BaseResourceListComponent } from 'app/shared/containers/base-resource-list/base-resource-list.component';\nimport { OrdemServicoService } from '../../api/ordem-servico.service';\nimport { OrdemServico, OrdemServicoResponse } from '../../models/ordem-servico.model';\n\n@Component({\n  selector: 'app-ordemservico-list',\n  templateUrl: './ordemservico-list.component.html',\n  styleUrls: ['./ordemservico-list.component.scss']\n})\nexport class OrdemservicoListComponent extends BaseResourceListComponent<\nOrdemServico, OrdemServicoResponse\n> {\nconstructor(\n  protected injector: Injector,\n  protected ordemServicoService: OrdemServicoService\n) {\n  super(injector, ordemServicoService);\n}\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-ordemservico-form',\n  templateUrl: './ordemservico-form.component.html',\n  styleUrls: ['./ordemservico-form.component.scss']\n})\nexport class OrdemservicoFormComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>ordemservico-form works!</p>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Route, RouterModule } from '@angular/router';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { OrdemservicoListComponent } from './containers/ordemservico-list/ordemservico-list.component';\nimport { OrdemservicoFormComponent } from './containers/ordemservico-form/ordemservico-form.component';\n\nconst routes: Route[] = [\n  { path: '', component: OrdemservicoListComponent },\n  { path: 'novo', component: OrdemservicoFormComponent },\n  { path: ':id/editar', component: OrdemservicoFormComponent },\n];\n\n@NgModule({\n  declarations: [\n    OrdemservicoListComponent,\n    OrdemservicoFormComponent,\n  ],\n  imports: [CommonModule, RouterModule.forChild(routes), SharedModule],\n})\nexport class OrdemServicoModule { }\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found-data',\r\n  templateUrl: './not-found-data.component.html',\r\n  styleUrls: ['./not-found-data.component.scss'],\r\n})\r\nexport class NotFoundDataComponent {\r\n  @Input('mensagem') mensagem: string;\r\n}\r\n","<div class=\"flex flex-col w-full h-full items-center justify-center border-t-2 border-gray-200\">\r\n  <img src=\"assets/icons/searching.svg\" class=\"w-64 h-64\" alt=\"\">\r\n  <p class=\"mt-2 text-lg md:text-2xl font-medium tracking-tight text-center text-secondary\">{{ mensagem }}</p>\r\n</div>\r\n","<div\r\n  class=\"relative flex flex-col flx-col-0 sm:flex-row flex-0 sm:items-center sm:justify-between py-8 px-6 md:px-8 border-b\">\r\n  <div class=\"text-4xl font-extrabold tracking-tight\">{{ pageTitle }}</div>\r\n\r\n  <div class=\"flex flex-col sm:flex-row items-start shrink-0 sm:items-center mt-6 sm:mt-0 sm:ml-4\">\r\n    <mat-form-field class=\"fuse-mat-dense fuse-mat-no-subscript fuse-mat-rounded min-w-64\" *ngIf=\"showSearch\">\r\n      <mat-icon class=\"icon-size-5\" matPrefix [svgIcon]=\"'heroicons_solid:search'\"></mat-icon>\r\n      <input matInput id=\"searchPerfil\" #temoPesquisa (keyup)=\"filtrar(temoPesquisa.value)\" [autocomplete]=\"'off'\"\r\n        [placeholder]=\"placeholder\" />\r\n    </mat-form-field>\r\n    <!-- Add product button -->\r\n    <a [routerLink]=\"['novo']\" routerLinkActive=\"router-link-active\" *ngIf=\"showButton\"\r\n      class=\"mat-focus-indicator mt-2 fuse-mat-button-rounded mat-flat-button mat-button-base mat-accent m-1 text-1xl\"\r\n      mat-flat-button>\r\n      <span class=\"p-3 flex flex-row items-center\">\r\n        <mat-icon class=\"icon-size-5\" [svgIcon]=\"'heroicons_outline:plus'\"></mat-icon>\r\n        Cadastrar\r\n      </span>\r\n    </a>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-page-header',\r\n  templateUrl: './page-header.component.html',\r\n  styleUrls: ['./page-header.component.scss'],\r\n})\r\nexport class PageHeaderComponent implements OnInit {\r\n  @Input('page-title') pageTitle: string = '';\r\n  @Input('show-button') showButton: boolean = true;\r\n  @Input('show-search') showSearch: boolean = true;\r\n  @Input('placeholder-text') placeholder: string = '';\r\n\r\n  @Output() pesquisar = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  filtrar(termo: string): void {\r\n    this.pesquisar.emit(termo);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthUtils } from 'app/core/auth/auth.utils';\r\nimport { ELocalStorage } from '../models/localstorage.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RulesService {\r\n  constructor() {}\r\n\r\n  temPermissao(rule: string): boolean {\r\n    const token = localStorage.getItem(ELocalStorage.TOKEN);\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    const { ROLES } = AuthUtils.decodeToken(token);\r\n\r\n    if (Object(ROLES).find((permissao) => permissao == rule)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Component, Injector, OnInit } from '@angular/core';\r\nimport { MatPaginatorIntl, PageEvent } from '@angular/material/paginator';\r\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\r\nimport { BaseResourceModel } from 'app/shared/models/base-resource.model';\r\nimport { IFilter } from 'app/shared/models/interface.model';\r\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\r\nimport { RulesService } from 'app/shared/services/rules.service';\r\nimport toastr from 'toastr';\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport abstract class BaseResourceListComponent<T extends BaseResourceModel, R>\r\n  implements OnInit\r\n{\r\n  resources: T[] = [];\r\n\r\n  // MatPaginator Inputs\r\n  length = 0;\r\n  pageSize = 10;\r\n  pageSizeOptions: number[] = [5, 10, 25, 100];\r\n\r\n  // MatPaginator Output\r\n  pageEvent: PageEvent;\r\n  protected _fuseConfirmationService: FuseConfirmationService;\r\n  protected _matPaginatorIntl: MatPaginatorIntl;\r\n  protected _ruleService: RulesService;\r\n\r\n  constructor(\r\n    protected injecto: Injector,\r\n    protected resourceService: BaseResourceService<T, R>\r\n  ) {\r\n    this._fuseConfirmationService = this.injecto.get(FuseConfirmationService);\r\n    this._matPaginatorIntl = this.injecto.get(MatPaginatorIntl);\r\n    this._ruleService = this.injecto.get(RulesService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.carregaInformacoesResource();\r\n    this._matPaginatorIntl.itemsPerPageLabel = 'Itens por página';\r\n  }\r\n\r\n  setPageSizeOptions(setPageSizeOptionsInput: string) {\r\n    if (setPageSizeOptionsInput) {\r\n      this.pageSizeOptions = setPageSizeOptionsInput\r\n        .split(',')\r\n        .map((str) => +str);\r\n    }\r\n  }\r\n\r\n  carregaInformacoesResource(): void {\r\n    const filtro: IFilter = {\r\n      filtro: '',\r\n      pagina: 0,\r\n      direcaoOrdenacao: 'DESC',\r\n      tamanho: 10,\r\n      ordenarPor: 'id',\r\n    };\r\n    this.resourceService.getAll(filtro).subscribe((data) => {\r\n      this.resources = data['content'];\r\n      this.length = data['totalElements'];\r\n      this.pageSize = data['size'];\r\n    });\r\n  }\r\n\r\n  excluir(resource: T): void {\r\n    const dialogRef = this._fuseConfirmationService.open({\r\n      title: `Deseja realmente excluir o item: ${resource.id}?`,\r\n      message: '',\r\n      icon: {\r\n        show: true,\r\n        name: 'heroicons_outline:exclamation',\r\n        color: 'warn',\r\n      },\r\n      actions: {\r\n        confirm: {\r\n          show: true,\r\n          label: 'Confirmar',\r\n          color: 'warn',\r\n        },\r\n        cancel: {\r\n          show: true,\r\n          label: 'Cancelar',\r\n        },\r\n      },\r\n      dismissible: false,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 'confirmed') {\r\n        this.resourceService.delete(resource.id).subscribe(\r\n          (res) => {\r\n            toastr.success(`Item excluído com sucesso!`, '', {\r\n              timeOut: 10000,\r\n              progressBar: true,\r\n              closeButton: true,\r\n            });\r\n            this.carregaInformacoesResource();\r\n          },\r\n          (error) => {\r\n            toastr.error(\r\n              'Não foi possível excluir o perfil',\r\n              error.error.error,\r\n              {\r\n                timeOut: 10000,\r\n                progressBar: true,\r\n                closeButton: true,\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  paginacao(event: Event): void {\r\n    this.pageSize = event['pageSize'];\r\n    const filtro: IFilter = {\r\n      filtro: '',\r\n      pagina: event['pageIndex'],\r\n      direcaoOrdenacao: 'DESC',\r\n      tamanho: this.pageSize,\r\n      ordenarPor: 'id',\r\n    };\r\n\r\n    this.resourceService.getAll(filtro).subscribe((data) => {\r\n      this.resources = data['content'];\r\n      this.length = data['totalElements'];\r\n      this.pageSize = data['size'];\r\n    });\r\n  }\r\n\r\n  filtrarResource(termo: string): void {\r\n    const filtro: IFilter = {\r\n      filtro: termo,\r\n      pagina: 0,\r\n      direcaoOrdenacao: 'DESC',\r\n      tamanho: 10,\r\n      ordenarPor: 'id',\r\n    };\r\n    this.resourceService.getAll(filtro).subscribe((data) => {\r\n      this.resources = data['content'];\r\n      this.length = data['totalElements'];\r\n      this.pageSize = data['size'];\r\n    });\r\n  }\r\n\r\n  validaPermissao(rule: string): boolean {\r\n    return this._ruleService.temPermissao(rule);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}