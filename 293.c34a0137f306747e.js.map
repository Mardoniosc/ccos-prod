{"version":3,"file":"293.c34a0137f306747e.js","mappings":"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","names":["NotFoundDataComponent","selectors","i0","PageHeaderComponent","constructor","this","EventEmitter","ngOnInit","filtrar","termo","pesquisar","emit","BaseResourceFormComponent","injecto","resource","resourceService","route","get","ActivatedRoute","router","Router","formBuilder","FormBuilder","setCurrentAction","buildResourceForm","loadResource","ngAfterContentChecked","setPageTitle","submitForm","resourceForm","invalid","value","currentAction","id","update","subscribe","toastr","timeOut","progressBar","closeButton","navigate","snapshot","parent","url","path","error","insert","idResource","Number","getById","patchValue","pageTitle","createPageTitle","editionPageTitle","RulesService","temPermissao","rule","token","localStorage","getItem","ELocalStorage","ROLES","AuthUtils","Object","find","permissao","factory","BaseResourceListComponent","_fuseConfirmationService","FuseConfirmationService","_matPaginatorIntl","MatPaginatorIntl","_ruleService","carregaInformacoesResource","itemsPerPageLabel","setPageSizeOptions","setPageSizeOptionsInput","pageSizeOptions","split","map","str","getAll","filtro","pagina","direcaoOrdenacao","tamanho","ordenarPor","data","resources","content","length","totalElements","pageSize","size","excluir","open","title","message","icon","show","name","color","actions","confirm","label","cancel","dismissible","afterClosed","result","delete","res","paginacao","event","pageIndex","filtrarResource","validaPermissao","BaseResourceModel","reject","info","resolve","Promise","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","triggerOnMaskChange","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","_config","maskExpression","actualValue","_formatWithSeparators","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","v","indexOf","join","match","decimals","replace","slice","rgx","test","substr","percentage","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","includes","checkInputPrecision","marker","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","substring","_compareOrIncludes","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","withoutDays","monthsCount","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","val","maskSymbol","filter","idx","isDecimalMarker","inputLength","comparedValue","excludedValue","some","index","ɵfac","ɵprov","MaskService","document","_elementRef","_renderer","super","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","symbolToReplace","currSymbol","replaceSymbol","numberToString","toLocaleString","useGrouping","maximumFractionDigits","String","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","then","setProperty","checkSpecialCharAmount","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","DOCUMENT","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","onPaste","onModelChange","onInput","e","el","target","_inputValue","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onClick","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","args","asyncGeneratorStep","_next","_asyncToGenerator","_this","setDisabledState","disable","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","ɵdir","ctx","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","_configFactory","initConfig","configValue","Function","NgxMaskModule","static","ngModule","providers","useValue","useFactory","deps","ɵmod","ɵinj","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init"],"sourceRoot":"webpack:///","sources":["./src/app/shared/components/not-found-data/not-found-data.component.ts","./src/app/shared/components/not-found-data/not-found-data.component.html","./src/app/shared/components/page-header/page-header.component.html","./src/app/shared/components/page-header/page-header.component.ts","./src/app/shared/containers/base-resource-form/BaseResourceFormComponent.ts","./src/app/shared/services/rules.service.ts","./src/app/shared/containers/base-resource-list/base-resource-list.component.ts","./src/app/shared/models/base-resource.model.ts","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","./node_modules/ngx-mask/fesm2020/ngx-mask.mjs"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found-data',\r\n  templateUrl: './not-found-data.component.html',\r\n  styleUrls: ['./not-found-data.component.scss'],\r\n})\r\nexport class NotFoundDataComponent {\r\n  @Input('mensagem') mensagem: string;\r\n}\r\n","<div class=\"flex flex-col w-full h-full items-center justify-center border-t-2 border-gray-200\">\r\n  <img src=\"assets/icons/searching.svg\" class=\"w-64 h-64\" alt=\"\">\r\n  <p class=\"mt-2 text-lg md:text-2xl font-medium tracking-tight text-center text-secondary\">{{ mensagem }}</p>\r\n</div>\r\n","<div\r\n  class=\"relative flex flex-col flx-col-0 sm:flex-row flex-0 sm:items-center sm:justify-between py-8 px-6 md:px-8 border-b\">\r\n  <div class=\"text-4xl font-extrabold tracking-tight\">{{ pageTitle }}</div>\r\n\r\n  <div class=\"flex flex-col sm:flex-row items-start shrink-0 sm:items-center mt-6 sm:mt-0 sm:ml-4\">\r\n    <mat-form-field class=\"fuse-mat-dense fuse-mat-no-subscript fuse-mat-rounded min-w-64\" *ngIf=\"showSearch\">\r\n      <mat-icon class=\"icon-size-5\" matPrefix [svgIcon]=\"'heroicons_solid:search'\"></mat-icon>\r\n      <input matInput id=\"searchPerfil\" #temoPesquisa (keyup)=\"filtrar(temoPesquisa.value)\" [autocomplete]=\"'off'\"\r\n        [placeholder]=\"placeholder\" />\r\n    </mat-form-field>\r\n    <!-- Add product button -->\r\n    <a [routerLink]=\"['novo']\" routerLinkActive=\"router-link-active\" *ngIf=\"showButton\"\r\n      class=\"mat-focus-indicator mt-2 fuse-mat-button-rounded mat-flat-button mat-button-base mat-accent m-1 text-1xl\"\r\n      mat-flat-button>\r\n      <span class=\"p-3 flex flex-row items-center\">\r\n        <mat-icon class=\"icon-size-5\" [svgIcon]=\"'heroicons_outline:plus'\"></mat-icon>\r\n        Cadastrar\r\n      </span>\r\n    </a>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-page-header',\r\n  templateUrl: './page-header.component.html',\r\n  styleUrls: ['./page-header.component.scss'],\r\n})\r\nexport class PageHeaderComponent implements OnInit {\r\n  @Input('page-title') pageTitle: string = '';\r\n  @Input('show-button') showButton: boolean = true;\r\n  @Input('show-search') showSearch: boolean = true;\r\n  @Input('placeholder-text') placeholder: string = '';\r\n\r\n  @Output() pesquisar = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  filtrar(termo: string): void {\r\n    this.pesquisar.emit(termo);\r\n  }\r\n}\r\n","import {\r\n  AfterContentChecked,\r\n  Component,\r\n  Inject,\r\n  Injector,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { FormBuilder, UntypedFormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport toastr from 'toastr';\r\n\r\nimport { BaseResourceModel } from 'app/shared/models/base-resource.model';\r\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport abstract class BaseResourceFormComponent<T extends BaseResourceModel, R>\r\n  implements OnInit, AfterContentChecked\r\n{\r\n  currentAction: string;\r\n  resourceForm: UntypedFormGroup;\r\n  pageTitle: string;\r\n\r\n  protected route: ActivatedRoute;\r\n  protected router: Router;\r\n  protected formBuilder: FormBuilder;\r\n\r\n  constructor(\r\n    protected injecto: Injector,\r\n    @Inject('resource') protected resource: T,\r\n    protected resourceService: BaseResourceService<T, R>\r\n  ) {\r\n    this.route = this.injecto.get(ActivatedRoute);\r\n    this.router = this.injecto.get(Router);\r\n    this.formBuilder = this.injecto.get(FormBuilder);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setCurrentAction();\r\n    this.buildResourceForm();\r\n    this.loadResource();\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    this.setPageTitle();\r\n  }\r\n\r\n  submitForm() {\r\n    if (this.resourceForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    const resource: T = this.resourceForm.value;\r\n    if (this.currentAction === 'novo') {\r\n      this.resourceService.insert(resource).subscribe(\r\n        () => {\r\n          toastr.success('Dado cadastrado com sucesso!', 'Sucesso', {\r\n            timeOut: 10000,\r\n            progressBar: true,\r\n            closeButton: true,\r\n          });\r\n          const baseComponentPath: string =\r\n            this.route.snapshot.parent.url[0].path;\r\n\r\n          this.router.navigate([baseComponentPath]);\r\n        },\r\n        (error) => {\r\n          toastr.error(\r\n            'Não foi possível carregar os dados',\r\n            error.error.error,\r\n            {\r\n              timeOut: 10000,\r\n              progressBar: true,\r\n              closeButton: true,\r\n            }\r\n          );\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    resource.id = this.resource.id;\r\n    this.resourceService.update(resource).subscribe(\r\n      () => {\r\n        toastr.success('Dado atualizado com sucesso!', 'Sucesso', {\r\n          timeOut: 10000,\r\n          progressBar: true,\r\n          closeButton: true,\r\n        });\r\n        const baseComponentPath: string =\r\n          this.route.snapshot.parent.url[0].path;\r\n\r\n        this.router.navigate([baseComponentPath]);\r\n      },\r\n      (error) => {\r\n        toastr.error('Não foi possível atualizar o dado', error.error.error, {\r\n          timeOut: 10000,\r\n          progressBar: true,\r\n          closeButton: true,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  // PRIVATE METHODS\r\n  protected setCurrentAction() {\r\n    if (this.route.snapshot.url[0]?.path === 'novo') {\r\n      this.currentAction = 'novo';\r\n    } else {\r\n      this.currentAction = 'editar';\r\n    }\r\n  }\r\n\r\n  protected loadResource() {\r\n    if (this.currentAction === 'editar') {\r\n      const idResource = Number(this.route.snapshot.url[0]?.path);\r\n      this.resourceService.getById(idResource).subscribe(\r\n        (resource) => {\r\n          this.resource = resource;\r\n          this.resourceForm.patchValue(this.resource);\r\n        },\r\n        (error) => {\r\n          toastr.error(\r\n            'Não foi possível carregar os dados',\r\n            error.error.error,\r\n            {\r\n              timeOut: 10000,\r\n              progressBar: true,\r\n              closeButton: true,\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  protected setPageTitle() {\r\n    if (this.currentAction === 'novo') {\r\n      this.pageTitle = this.createPageTitle();\r\n    } else {\r\n      this.pageTitle = this.editionPageTitle();\r\n    }\r\n  }\r\n\r\n  protected createPageTitle(): string {\r\n    return 'Novo';\r\n  }\r\n\r\n  protected editionPageTitle(): string {\r\n    return 'Edição';\r\n  }\r\n\r\n  protected abstract buildResourceForm(): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthUtils } from 'app/core/auth/auth.utils';\r\nimport { ELocalStorage } from '../models/localstorage.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RulesService {\r\n  constructor() {}\r\n\r\n  temPermissao(rule: string): boolean {\r\n    const token = localStorage.getItem(ELocalStorage.TOKEN);\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    const { ROLES } = AuthUtils.decodeToken(token);\r\n\r\n    if (Object(ROLES).find((permissao) => permissao == rule)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Component, Injector, OnInit } from '@angular/core';\r\nimport { MatPaginatorIntl, PageEvent } from '@angular/material/paginator';\r\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\r\nimport { BaseResourceModel } from 'app/shared/models/base-resource.model';\r\nimport { IFilter } from 'app/shared/models/interface.model';\r\nimport { BaseResourceService } from 'app/shared/services/base-resource.service';\r\nimport { RulesService } from 'app/shared/services/rules.service';\r\nimport toastr from 'toastr';\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport abstract class BaseResourceListComponent<T extends BaseResourceModel, R>\r\n  implements OnInit\r\n{\r\n  resources: T[] = [];\r\n\r\n  // MatPaginator Inputs\r\n  length = 0;\r\n  pageSize = 10;\r\n  pageSizeOptions: number[] = [5, 10, 25, 100];\r\n\r\n  // MatPaginator Output\r\n  pageEvent: PageEvent;\r\n  protected _fuseConfirmationService: FuseConfirmationService;\r\n  protected _matPaginatorIntl: MatPaginatorIntl;\r\n  protected _ruleService: RulesService;\r\n\r\n  constructor(\r\n    protected injecto: Injector,\r\n    protected resourceService: BaseResourceService<T, R>\r\n  ) {\r\n    this._fuseConfirmationService = this.injecto.get(FuseConfirmationService);\r\n    this._matPaginatorIntl = this.injecto.get(MatPaginatorIntl);\r\n    this._ruleService = this.injecto.get(RulesService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.carregaInformacoesResource();\r\n    this._matPaginatorIntl.itemsPerPageLabel = 'Itens por página';\r\n  }\r\n\r\n  setPageSizeOptions(setPageSizeOptionsInput: string) {\r\n    if (setPageSizeOptionsInput) {\r\n      this.pageSizeOptions = setPageSizeOptionsInput\r\n        .split(',')\r\n        .map((str) => +str);\r\n    }\r\n  }\r\n\r\n  carregaInformacoesResource(): void {\r\n    const filtro: IFilter = {\r\n      filtro: '',\r\n      pagina: 0,\r\n      direcaoOrdenacao: 'DESC',\r\n      tamanho: 10,\r\n      ordenarPor: 'id',\r\n    };\r\n    this.resourceService.getAll(filtro).subscribe((data) => {\r\n      this.resources = data['content'];\r\n      this.length = data['totalElements'];\r\n      this.pageSize = data['size'];\r\n    });\r\n  }\r\n\r\n  excluir(resource: T): void {\r\n    const dialogRef = this._fuseConfirmationService.open({\r\n      title: `Deseja realmente excluir o item: ${resource.id}?`,\r\n      message: '',\r\n      icon: {\r\n        show: true,\r\n        name: 'heroicons_outline:exclamation',\r\n        color: 'warn',\r\n      },\r\n      actions: {\r\n        confirm: {\r\n          show: true,\r\n          label: 'Confirmar',\r\n          color: 'warn',\r\n        },\r\n        cancel: {\r\n          show: true,\r\n          label: 'Cancelar',\r\n        },\r\n      },\r\n      dismissible: false,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 'confirmed') {\r\n        this.resourceService.delete(resource.id).subscribe(\r\n          (res) => {\r\n            toastr.success(`Item excluído com sucesso!`, '', {\r\n              timeOut: 10000,\r\n              progressBar: true,\r\n              closeButton: true,\r\n            });\r\n            this.carregaInformacoesResource();\r\n          },\r\n          (error) => {\r\n            toastr.error(\r\n              'Não foi possível excluir o perfil',\r\n              error.error.error,\r\n              {\r\n                timeOut: 10000,\r\n                progressBar: true,\r\n                closeButton: true,\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  paginacao(event: Event): void {\r\n    this.pageSize = event['pageSize'];\r\n    const filtro: IFilter = {\r\n      filtro: '',\r\n      pagina: event['pageIndex'],\r\n      direcaoOrdenacao: 'DESC',\r\n      tamanho: this.pageSize,\r\n      ordenarPor: 'id',\r\n    };\r\n\r\n    this.resourceService.getAll(filtro).subscribe((data) => {\r\n      this.resources = data['content'];\r\n      this.length = data['totalElements'];\r\n      this.pageSize = data['size'];\r\n    });\r\n  }\r\n\r\n  filtrarResource(termo: string): void {\r\n    const filtro: IFilter = {\r\n      filtro: termo,\r\n      pagina: 0,\r\n      direcaoOrdenacao: 'DESC',\r\n      tamanho: 10,\r\n      ordenarPor: 'id',\r\n    };\r\n    this.resourceService.getAll(filtro).subscribe((data) => {\r\n      this.resources = data['content'];\r\n      this.length = data['totalElements'];\r\n      this.pageSize = data['size'];\r\n    });\r\n  }\r\n\r\n  validaPermissao(rule: string): boolean {\r\n    return this._ruleService.temPermissao(rule);\r\n  }\r\n}\r\n","export abstract class BaseResourceModel {\r\n  id?: number;\r\n}\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\nconst config = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    triggerOnMaskChange: false,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass MaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = str.match(regExp)?.[0] ?? '';\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = x[0];\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\n                const substr = this.suffix.substr(i, this.suffix?.length);\n                if (inputValue.includes(substr) &&\n                    (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, this.suffix?.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    const diff = precisionMatch[0].length - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue?.length > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            const valuesIP = inputValue.split('.');\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i]?.match('\\\\d')) {\n                arr.push(inputValue[i]);\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue =\n                inputValue.length > 1 &&\n                    inputValue[0] === '0' &&\n                    inputValue[1] !== this.thousandSeparator &&\n                    !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\n                    !backspaced\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            if (backspaced) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp) ||\n                (inputValue.length === 1 &&\n                    this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (inputSymbol === ' ' && maskExpression[cursor] === ' ') {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]]?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/)) {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith('separator')\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern\n            ? this.customPattern\n            : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === '' || Number(value) > 255;\n                }\n                return value === '' || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n}\nMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskApplierService, deps: [{ token: config }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskApplierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskApplierService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }]; } });\n\nclass MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this.triggerOnMaskChange = false;\n        this.onChange = (_) => { };\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = this.actualValue.split('');\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            if (this.showMaskTyped) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.removeMask(inputValue);\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(''))\n                    : inputValue;\n        }\n        if (this.showMaskTyped) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator));\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, cb = () => { }) {\n        const formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index]] &&\n                this.maskAvailablePatterns[maskExpression[index]]?.symbol) {\n                return this.maskAvailablePatterns[maskExpression[index]]?.symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split('')\n            .filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n            (this.maskSpecialCharacters.includes(this.maskExpression[i]) &&\n                symbol === this.maskExpression[i]));\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if (!value && value !== 0) {\n            return String(value);\n        }\n        return Number(value).toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        });\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef.nativeElement;\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask.split('').filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i]?.match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i]?.match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), '.');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskService, deps: [{ token: DOCUMENT }, { token: config }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; } });\n\nclass MaskDirective {\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.triggerOnMaskChange = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        this.onChange = (_) => { };\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, triggerOnMaskChange, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split('||')\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || '';\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key].optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length ===\n                    this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 &&\n                value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 &&\n                    value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === '' || value === null || value === undefined) && this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue('');\n        }\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = !el.value || el.value === this._maskService.prefix\n            ? this._maskService.prefix + this._maskService.maskIsShown\n            : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((el.selectionStart || el.selectionEnd) <=\n            this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = this.specialCharacters?.length\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart &&\n                        el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) &&\n                            ((this.prefix.length >= 1 && el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                        }\n                    }\n                }\n            }\n            this.checkSelectionOnDeletion(el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey) ||\n            (e.keyCode === 65 && e.metaKey) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    async writeValue(inputValue) {\n        if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n            if ('disable' in inputValue) {\n                this.setDisabledState(Boolean(inputValue.disable));\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.value;\n        }\n        if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._maskService.numberToString(inputValue);\n            if (!Array.isArray(this.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue =\n                    this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (typeof inputValue !== 'string') {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        this._inputValue = inputValue;\n        this._setMask();\n        if ((inputValue && this._maskService.maskExpression) ||\n            (this._maskService.maskExpression &&\n                (this._maskService.prefix || this._maskService.showMaskTyped))) {\n            // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n            this._maskService.writingValue = true;\n            this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n            ];\n            // Let the service know we've finished writing value\n            this._maskService.writingValue = false;\n        }\n        else {\n            this._maskService.formElementProperty = ['value', inputValue];\n        }\n        this._inputValue = inputValue;\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce((accum, currval, index) => {\n                this._start = currval === '{' ? index : this._start;\n                if (currval !== '}') {\n                    return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue.split('').filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this._maskService.maskExpression =\n                        this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                }\n            });\n        }\n    }\n}\nMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskDirective, deps: [{ token: DOCUMENT }, { token: MaskService }, { token: config }], target: i0.ɵɵFactoryTarget.Directive });\nMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.1\", type: MaskDirective, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", triggerOnMaskChange: \"triggerOnMaskChange\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"blur\": \"onBlur()\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        MaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MaskService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [config]\n                }] }]; }, propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass MaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskPipe, deps: [{ token: MaskApplierService }], target: i0.ɵɵFactoryTarget.Pipe });\nMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskPipe, name: \"mask\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: MaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                }]\n        }], ctorParameters: function () { return [{ type: MaskApplierService }]; } });\n\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NgxMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.1\", ngImport: i0, type: NgxMaskModule, declarations: [MaskDirective, MaskPipe], exports: [MaskDirective, MaskPipe] });\nNgxMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NgxMaskModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NgxMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MaskDirective, MaskPipe],\n                    declarations: [MaskDirective, MaskPipe],\n                }]\n        }] });\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n"],"x_google_ignoreList":[8,9]}